// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Produtos {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  nome           String
  preco          String
  categoria      String
  subcategoria   String
  desconto       String?
  preco_desconto String?
  image_url      String
  quantidade     Int
  validade       Validades @relation(fields: [nome], references: [id])
  created_at     DateTime? @default(now())
  updated_at     DateTime? @default(now())

  itensId String?  @db.ObjectId
  itens   Pedidos? @relation(fields: [itensId], references: [id])
}

model Cliente {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  id_user   String  @db.ObjectId
  nome      String
  email     String?
  telefone  String
  cpf       String?
  endereco  String?
  pets      Pet[]
  image_url String?

  pedido Pedidos[]
}

model Pet {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  idade     String?
  raca      String
  especie   String
  image_url String?

  clienteId String?  @db.ObjectId
  cliente   Cliente? @relation(fields: [clienteId], references: [id])
}

model Pedidos {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  data_retirar    String
  valor_do_pedido String
  itens           Produtos[]

  clienteId String  @db.ObjectId
  cliente   Cliente @relation(fields: [clienteId], references: [id])
}

model Validades {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  item           Produtos[]
  quantidade     String
  vencimento     String
  tratamento     String
  funcionario    Funcionario @relation(fields: [id_funcionario], references: [id])
  id_funcionario String      @db.ObjectId
}

model Funcionario {
  id                 String      @id @default(auto()) @map("_id") @db.ObjectId
  nome               String
  cargo              String?
  nivel_acesso       String
  validades_produtos Validades[]

  user User[]
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  userId        String?         @db.ObjectId
  funcionario   Funcionario?    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}
